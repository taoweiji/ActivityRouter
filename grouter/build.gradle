apply plugin: 'com.android.library'
apply plugin: 'maven'
//apply plugin: 'com.github.dcendents.android-maven'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:support-v4:28.0.0'
    api project(':grouter-annotation')
    testImplementation 'junit:junit:4.12'
}
def task = tasks.create("copyToGrouterAndroidX").doFirst {
    def currentDir = project.projectDir
    def targetDir = new File(project.rootDir, "grouter-androidx")
    new File(targetDir, "src").deleteDir()
    copy(currentDir, targetDir)
}
task.setGroup("grouter")

void copy(File file, File target) {
    if (file.name == "build.gradle" || file.name == "build" || file.name.endsWith(".iml") || file.name.endsWith(".DS_Store")) {
        return
    }
    if (file.isDirectory()) {
        def files = file.list()
        if (files == null) {
            return
        }
        for (def name : files) {
            copy(new File(file, name), new File(target, name))
        }
        return
    }
    String text = file.getText()
    if (file.name.endsWith(".java")) {
        text = text.replace("android.support.v4.app.Fragment", "androidx.fragment.app.Fragment")
        text = text.replace("android.support.v4.app.FragmentManager", "androidx.fragment.app.FragmentManager")
//        text = text.replace("android.support.annotation.NonNull", "androidx.annotation.NonNull")
//        text = text.replace("android.support.annotation.Nullable", "androidx.annotation.Nullable")
        text = text.replace("android.support.annotation", "androidx.annotation")
//        text = text.replace("android.support.annotation.IdRes", "androidx.annotation.IdRes")
    }
    if (!target.parentFile.exists()) {
        target.parentFile.mkdirs()
    }
    println("copy " + file.getAbsolutePath())
    println("to   " + target.getAbsolutePath())
    println()
    target.write(text)
}

apply plugin: 'com.novoda.bintray-release'
publish {
    userOrg = MAVEN_USER_ORG
    groupId = MAVEN_GROUP_ID
    artifactId = project.name
    publishVersion = MAVEN_PUBLISH_VERSION
    desc = MAVEN_DESC
    website = MAVEN_WEBSITE
}
group = MAVEN_GROUP_ID
version =MAVEN_PUBLISH_VERSION
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}